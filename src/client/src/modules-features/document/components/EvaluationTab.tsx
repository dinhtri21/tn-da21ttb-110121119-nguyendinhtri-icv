import evaluateService from "@/api/services/evaluateService";
import { IEvaluate } from "@/interface/evaluate";
import { ActionIcon, Badge, Button, Center, Group, Table, Text } from "@mantine/core";
import { IconAdjustments, IconRefresh } from "@tabler/icons-react";
import { useQuery } from "@tanstack/react-query";

interface EvaluationTabProps {
  id: string;
}

export default function EvaluationTab({ id }: EvaluationTabProps) {
  const query = useQuery<IEvaluate[]>({
    queryKey: ["EvaluationTab", id],
    queryFn: async () => {
      const response = await evaluateService.getEvaluations({ id });
      return response.data.data || [];
      //   return mockData;
    },
    enabled: false,
  });

  const handleEnableQuery = () => {
    query.refetch();
  };

  //   if (query.isLoading)
  //     return (
  //       <Center h="100vh" w="100%">
  //         Loading...
  //       </Center>
  //     );

  //   if (query.isError || !query.data)
  //     return (
  //       <Center h="100vh" w="100%">
  //         Kh√¥ng c√≥ d·ªØ li·ªáu...
  //       </Center>
  //     );

  return (
    <div>
      <h3 className="text-sm font-medium text-gray-600 mb-1">ƒê√°nh gi√° CV b·ªüi AI</h3>
      {!query.data ? (
        <p className="text-gray-400 text-xs">üí° Nh·∫•n n√∫t t·∫£i ƒë√°nh gi√° ƒë·ªÉ th·ª±c hi·ªán</p>
      ) : (
        <p className="text-gray-400 text-xs">üí° Nh·∫•n n√∫t t·∫£i l·∫°i ƒë·ªÉ l√†m m·ªõi ƒë√°nh gi√°</p>
      )}
      {!query.data && (
        <Button onClick={handleEnableQuery} size="xs" mt="8px">
          T·∫£i ƒë√°nh gi√°
        </Button>
      )}
      {query.isLoading && <Center w="100%">Loading...</Center>}
      {query.isError && <Center w="100%">Kh√¥ng c√≥ d·ªØ li·ªáu...</Center>}

      {query.isSuccess && (
        <Table verticalSpacing="sm">
          <Table.Thead>
            <Table.Tr>
              <Table.Th w="22%" p={8}>
                <Text fz="13px" fw={500}>
                  Khu v·ª±c
                </Text>
              </Table.Th>
              <Table.Th w="18%" ta="center" p={8}>
                <Text fz="13px" fw={500}>
                  ƒêi·ªÉm
                </Text>
              </Table.Th>
              <Table.Th p={8}>
                <Group justify="space-between" align="center">
                  <Text fz="13px" fw={500}>
                    M√¥ t·∫£
                  </Text>
                  <ActionIcon
                    onClick={handleEnableQuery}
                    variant="light"
                    title="T·∫£i l·∫°i"
                    aria-label="Settings"
                  >
                    <IconRefresh style={{ width: "70%", height: "70%" }} stroke={1.5} />
                  </ActionIcon>
                </Group>
              </Table.Th>
            </Table.Tr>
          </Table.Thead>
          <Table.Tbody>
            {query.data.map((evaluation, index) => (
              <Table.Tr key={index}>
                <Table.Td p={4}>
                  <Text fz="13px">{evaluation.area}</Text>
                </Table.Td>
                <Table.Td ta="center" p={4}>
                  <Badge
                    color={
                      evaluation.score >= 8 ? "green" : evaluation.score >= 5 ? "orange" : "red"
                    }
                  >
                    {evaluation.score}
                  </Badge>
                </Table.Td>
                <Table.Td p={4}>
                  <Text fz="13px" color="dimmed" mb={evaluation.suggestion ? "2px" : 0}>
                    {evaluation.description}
                  </Text>
                  {evaluation.suggestion && (
                    <Text fz="13px" c="blue.5">
                      G·ª£i √Ω: {evaluation.suggestion}
                    </Text>
                  )}
                </Table.Td>
              </Table.Tr>
            ))}
          </Table.Tbody>
        </Table>
      )}
    </div>
  );
}

const mockData: IEvaluate[] = [
  {
    area: "Th√¥ng tin",
    score: 9,
    description: "Th√¥ng tin li√™n h·ªá ƒë·∫ßy ƒë·ªß v√† r√µ r√†ng.",
    suggestion: "C√≥ th·ªÉ th√™m LinkedIn profile n·∫øu c√≥.",
    example: "LinkedIn: linkedin.com/in/yourprofile",
    correction: null,
  },
  {
    area: "Kinh nghi·ªám",
    score: 8,
    description:
      "Kinh nghi·ªám th·ª±c t·∫≠p ph√π h·ª£p v·ªõi v·ªã tr√≠ ·ª©ng tuy·ªÉn. M√¥ t·∫£ c√¥ng vi·ªác r√µ r√†ng, s·ª≠ d·ª•ng c√°c ƒë·ªông t·ª´ m·∫°nh.",
    suggestion: "N√™u b·∫≠t c√°c th√†nh t·ª±u c·ª• th·ªÉ, c√≥ s·ªë li·ªáu c√†ng t·ªët.",
    example: "V√≠ d·ª•: 'T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t c·ªßa module X, gi·∫£m th·ªùi gian t·∫£i trang xu·ªëng 20%'.",
    correction: null,
  },
  {
    area: "Kƒ© nƒÉng",
    score: 9,
    description:
      "Li·ªát k√™ ƒë·∫ßy ƒë·ªß c√°c k·ªπ nƒÉng li√™n quan ƒë·∫øn front-end v√† back-end. Ph√¢n lo·∫°i r√µ r√†ng.",
    suggestion:
      "C√≥ th·ªÉ chia nh·ªè h∆°n th√†nh c√°c nh√≥m k·ªπ nƒÉng c·ª• th·ªÉ (v√≠ d·ª•: Frontend Frameworks, Backend Frameworks, Databases).",
    example: null,
    correction: null,
  },
  {
    area: "H·ªçc v·∫•n",
    score: 8,
    description: "Th√¥ng tin h·ªçc v·∫•n ƒë·∫ßy ƒë·ªß. GPA kh√° t·ªët.",
    suggestion: "C√≥ th·ªÉ th√™m c√°c ho·∫°t ƒë·ªông ngo·∫°i kh√≥a li√™n quan ƒë·∫øn chuy√™n ng√†nh.",
    example: "V√≠ d·ª•: 'Th√†nh vi√™n CLB L·∫≠p tr√¨nh'.",
    correction: null,
  },
  {
    area: "M·ª•c ti√™u ngh·ªÅ nghi·ªáp",
    score: 6,
    description: "M·ª•c ti√™u ng·∫Øn g·ªçn nh∆∞ng ch∆∞a c·ª• th·ªÉ.",
    suggestion:
      "N√™u r√µ h∆°n v·ªÅ lo·∫°i h√¨nh c√¥ng ty mong mu·ªën l√†m vi·ªác v√† ƒë·ªãnh h∆∞·ªõng ph√°t tri·ªÉn trong t∆∞∆°ng lai g·∫ßn.",
    example:
      "V√≠ d·ª•: 'T√¨m ki·∫øm v·ªã tr√≠ full-stack developer t·∫°i m·ªôt c√¥ng ty c√¥ng ngh·ªá nƒÉng ƒë·ªông, t·∫≠p trung v√†o ph√°t tri·ªÉn c√°c ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i, v√† mong mu·ªën ƒë√≥ng g√≥p v√†o c√°c d·ª± √°n c√≥ t√°c ƒë·ªông l·ªõn ƒë·∫øn ng∆∞·ªùi d√πng'.",
    correction: null,
  },
  {
    area: "Th√†nh t√≠ch",
    score: 5,
    description: "Kh√¥ng c√≥ th√¥ng tin v·ªÅ th√†nh t√≠ch.",
    suggestion:
      "Li·ªát k√™ c√°c th√†nh t√≠ch ƒë·∫°t ƒë∆∞·ª£c trong qu√° tr√¨nh h·ªçc t·∫≠p ho·∫∑c l√†m vi·ªác, v√≠ d·ª•: gi·∫£i th∆∞·ªüng trong c√°c cu·ªôc thi, c√°c d·ª± √°n n·ªïi b·∫≠t, c√°c ƒë√≥ng g√≥p quan tr·ªçng cho c√¥ng ty.",
    example:
      "V√≠ d·ª•: 'ƒê·∫°t gi·∫£i nh·∫•t cu·ªôc thi l·∫≠p tr√¨nh ABC', 'Ho√†n th√†nh xu·∫•t s·∫Øc d·ª± √°n XYZ, ƒë∆∞·ª£c kh√°ch h√†ng ƒë√°nh gi√° cao'.",
    correction: null,
  },
  {
    area: "D·ª± √°n",
    score: 8,
    description:
      "C√°c d·ª± √°n ƒë∆∞·ª£c m√¥ t·∫£ kh√° chi ti·∫øt, li·ªát k√™ ƒë∆∞·ª£c c√¥ng ngh·ªá s·ª≠ d·ª•ng v√† tr√°ch nhi·ªám.",
    suggestion: "N√™n th√™m c√°c con s·ªë c·ª• th·ªÉ ƒë·ªÉ ch·ª©ng minh k·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c t·ª´ d·ª± √°n.",
    example: "V√≠ d·ª•: 'TƒÉng 15% l∆∞·ª£ng truy c·∫≠p sau khi tri·ªÉn khai t√≠nh nƒÉng m·ªõi'.",
    correction: null,
  },
  {
    area: "Frontend",
    score: 9,
    description:
      "K·ªπ nƒÉng frontend r·∫•t t·ªët, bao g·ªìm HTML, CSS, JavaScript, TypeScript, ReactJS, Next.js, React-Native, Mantine UI, Shadcn UI, Tailwind CSS, Figma.",
    suggestion: "Kh√¥ng c√≥.",
    example: null,
    correction: null,
  },
  {
    area: "Backend",
    score: 7,
    description:
      "C√≥ ki·∫øn th·ª©c v·ªÅ backend v·ªõi C#, .Net, NodeJS (ExpressJS), RESTful API. Hi·ªÉu v·ªÅ ki·∫øn tr√∫c N-layer, Clean Architecture.",
    suggestion: "C√≥ th·ªÉ b·ªï sung th√™m c√°c kinh nghi·ªám l√†m vi·ªác c·ª• th·ªÉ v·ªõi backend.",
    example: null,
    correction: null,
  },
  {
    area: "Database",
    score: 7,
    description: "C√≥ kinh nghi·ªám l√†m vi·ªác v·ªõi SQL (SQL Server, MySQL) v√† NoSQL (MongoDB).",
    suggestion: "C√≥ th·ªÉ b·ªï sung kinh nghi·ªám v·ªÅ t·ªëi ∆∞u h√≥a database.",
    example: null,
    correction: null,
  },
  {
    area: "C√¥ng c·ª•",
    score: 8,
    description: "S·ª≠ d·ª•ng th√†nh th·∫°o c√°c c√¥ng c·ª• Visual Studio, VS Code, GIT, Fork, Postman.",
    suggestion: "Kh√¥ng c√≥.",
    example: null,
    correction: null,
  },
];
